namespace UnityRehamove {
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class RehamoveDevice : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RehamoveDevice(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RehamoveDevice obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RehamoveDevice() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          rehamovelibPINVOKE.delete_RehamoveDevice(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_Smpt_device device {
    set {
      rehamovelibPINVOKE.RehamoveDevice_device_set(swigCPtr, SWIGTYPE_p_Smpt_device.getCPtr(value));
      if (rehamovelibPINVOKE.SWIGPendingException.Pending) throw rehamovelibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_Smpt_device ret = new SWIGTYPE_p_Smpt_device(rehamovelibPINVOKE.RehamoveDevice_device_get(swigCPtr), true);
      if (rehamovelibPINVOKE.SWIGPendingException.Pending) throw rehamovelibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int battery {
    set {
      rehamovelibPINVOKE.RehamoveDevice_battery_set(swigCPtr, value);
    } 
    get {
      int ret = rehamovelibPINVOKE.RehamoveDevice_battery_get(swigCPtr);
      return ret;
    } 
  }

  public int mode {
    set {
      rehamovelibPINVOKE.RehamoveDevice_mode_set(swigCPtr, value);
    } 
    get {
      int ret = rehamovelibPINVOKE.RehamoveDevice_mode_get(swigCPtr);
      return ret;
    } 
  }

  public float current {
    set {
      rehamovelibPINVOKE.RehamoveDevice_current_set(swigCPtr, value);
    } 
    get {
      float ret = rehamovelibPINVOKE.RehamoveDevice_current_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint16_t pulse_width {
    set {
      rehamovelibPINVOKE.RehamoveDevice_pulse_width_set(swigCPtr, SWIGTYPE_p_uint16_t.getCPtr(value));
      if (rehamovelibPINVOKE.SWIGPendingException.Pending) throw rehamovelibPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint16_t ret = new SWIGTYPE_p_uint16_t(rehamovelibPINVOKE.RehamoveDevice_pulse_width_get(swigCPtr), true);
      if (rehamovelibPINVOKE.SWIGPendingException.Pending) throw rehamovelibPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public RehamoveDevice() : this(rehamovelibPINVOKE.new_RehamoveDevice(), true) {
  }

}
}
