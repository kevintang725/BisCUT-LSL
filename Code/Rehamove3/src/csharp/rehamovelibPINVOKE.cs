namespace UnityRehamove {
//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


class rehamovelibPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="SWIGRegisterExceptionCallbacks_rehamovelib")]
    public static extern void SWIGRegisterExceptionCallbacks_rehamovelib(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_rehamovelib")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_rehamovelib(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_rehamovelib(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_rehamovelib(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="SWIGRegisterStringCallback_rehamovelib")]
    public static extern void SWIGRegisterStringCallback_rehamovelib(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_rehamovelib(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static rehamovelibPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_RehamoveDevice_device_set")]
  public static extern void RehamoveDevice_device_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_RehamoveDevice_device_get")]
  public static extern global::System.IntPtr RehamoveDevice_device_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_RehamoveDevice_battery_set")]
  public static extern void RehamoveDevice_battery_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_RehamoveDevice_battery_get")]
  public static extern int RehamoveDevice_battery_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_RehamoveDevice_mode_set")]
  public static extern void RehamoveDevice_mode_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_RehamoveDevice_mode_get")]
  public static extern int RehamoveDevice_mode_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_RehamoveDevice_current_set")]
  public static extern void RehamoveDevice_current_set(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_RehamoveDevice_current_get")]
  public static extern float RehamoveDevice_current_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_RehamoveDevice_pulse_width_set")]
  public static extern void RehamoveDevice_pulse_width_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_RehamoveDevice_pulse_width_get")]
  public static extern global::System.IntPtr RehamoveDevice_pulse_width_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_new_RehamoveDevice")]
  public static extern global::System.IntPtr new_RehamoveDevice();

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_delete_RehamoveDevice")]
  public static extern void delete_RehamoveDevice(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_open_port")]
  public static extern global::System.IntPtr open_port(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_close_port")]
  public static extern int close_port(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_initialize_low_level")]
  public static extern int initialize_low_level(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_stop_low_level")]
  public static extern int stop_low_level(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_pulse")]
  public static extern int pulse(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_custom_pulse")]
  public static extern int custom_pulse(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, float jarg4, int jarg5, float jarg6, int jarg7, float jarg8, int jarg9, float jarg10, int jarg11, float jarg12, int jarg13, float jarg14, int jarg15, float jarg16, int jarg17, float jarg18, int jarg19, float jarg20, int jarg21, float jarg22, int jarg23, float jarg24, int jarg25, float jarg26, int jarg27, float jarg28, int jarg29, float jarg30, int jarg31, float jarg32, int jarg33, float jarg34, int jarg35);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_change_mode")]
  public static extern int change_mode(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_set_pulse_data")]
  public static extern int set_pulse_data(global::System.Runtime.InteropServices.HandleRef jarg1, float jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_run")]
  public static extern int run(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_midlevel_start")]
  public static extern int midlevel_start(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, float jarg3);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_midlevel_update")]
  public static extern int midlevel_update(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_midlevel_end")]
  public static extern int midlevel_end(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_get_version")]
  public static extern string get_version();

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_get_battery")]
  public static extern int get_battery(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_get_mode")]
  public static extern int get_mode(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_get_current")]
  public static extern float get_current(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_get_pulse_width")]
  public static extern int get_pulse_width(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("rehamovelib", EntryPoint="CSharp_battery_request")]
  public static extern int battery_request(global::System.Runtime.InteropServices.HandleRef jarg1);
}
}
